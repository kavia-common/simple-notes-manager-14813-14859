{"is_source_file": true, "format": "C#", "description": "Main program file for the NotesBackend application. It sets up the web application, configures services (including Swagger/OpenAPI, CORS, dependency injection), authentication with JWT, and maps REST API endpoints for health check, user authentication (signup/login), and CRUD operations for notes with authorization.", "external_files": ["NotesBackend.DTOs", "NotesBackend.Models", "NotesBackend.Repositories", "NotesBackend.Services", "NotesBackend.Utils"], "external_methods": ["builder.Services.AddEndpointsApiExplorer", "builder.Services.AddOpenApiDocument", "builder.Services.AddCors", "builder.Services.AddSingleton", "Environment.GetEnvironmentVariable", "builder.Services.BuildServiceProvider", "JwtTokenService.BuildValidationParameters", "app.UseCors", "app.UseAuthentication", "app.UseAuthorization", "app.UseOpenApi", "app.UseSwaggerUi", "app.MapGet", "app.MapPost", "app.MapGroup", "ClaimsPrincipal.GetUserId", "repo.GetByUser", "repo.GetById", "repo.Add", "repo.Update", "repo.Delete", "Results.BadRequest", "Results.Conflict", "Results.Unauthorized", "Results.NotFound", "Results.Ok", "Results.Created", "Results.NoContent", "Results.Json"], "published": ["SignupRequest", "LoginRequest", "LoginResponse", "NoteResponse", "CreateNoteRequest", "UpdateNoteRequest", "HealthCheckResponse"], "classes": [{"name": "SignupRequest", "description": "Data transfer object for user signup request, includes username and password."}, {"name": "LoginRequest", "description": "Data transfer object for user login request, includes username and password."}, {"name": "LoginResponse", "description": "Response object containing JWT token and expiration timestamp after login or signup."}, {"name": "NoteResponse", "description": "Represents a note data transferred over API, including id, title, content, and timestamps."}, {"name": "CreateNoteRequest", "description": "Request DTO for creating a new note, includes title and content."}, {"name": "UpdateNoteRequest", "description": "Request DTO for updating an existing note, includes title and content."}], "methods": [{"name": "BuildValidationParameters", "description": "Constructs token validation parameters for JWT authentication."}], "calls": ["WebApplication.CreateBuilder", "builder.Services.AddEndpointsApiExplorer", "builder.Services.AddOpenApiDocument", "builder.Services.AddCors", "builder.Services.AddSingleton", "Environment.GetEnvironmentVariable", "builder.Configuration", "builder.Services.AddAuthentication", "builder.Services.AddAuthorization", "app.UseCors", "app.UseAuthentication", "app.UseAuthorization", "app.UseOpenApi", "app.UseSwaggerUi", "app.MapGet", "app.MapPost", "app.MapGroup", "ClaimsPrincipal.GetUserId", "repo.GetByUser", "repo.GetById", "repo.Add", "repo.Update", "repo.Delete", "Results.*", "app.Run"], "search-terms": ["JwtTokenService", "Notes API", "Note management", "User authentication", "Swagger", "CORS policy", "Notes endpoints", "Authorization", "Dependency injection", "Program.cs routing"], "state": 2, "file_id": 2, "knowledge_revision": 53, "git_revision": "06900716c0bc327e76ed781efcd43c5a58c85bca", "revision_history": [{"11": "9c0a4c8ddd3289d94c7cd59081feee2286b1445b"}, {"38": "9c0a4c8ddd3289d94c7cd59081feee2286b1445b"}, {"43": "9c0a4c8ddd3289d94c7cd59081feee2286b1445b"}, {"46": "9c0a4c8ddd3289d94c7cd59081feee2286b1445b"}, {"47": "9c0a4c8ddd3289d94c7cd59081feee2286b1445b"}, {"48": "9c0a4c8ddd3289d94c7cd59081feee2286b1445b"}, {"50": "06900716c0bc327e76ed781efcd43c5a58c85bca"}, {"51": "06900716c0bc327e76ed781efcd43c5a58c85bca"}, {"53": "06900716c0bc327e76ed781efcd43c5a58c85bca"}], "hash": "f7a9deae560452e77c5f3ce221589e37", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/Program.cs"}